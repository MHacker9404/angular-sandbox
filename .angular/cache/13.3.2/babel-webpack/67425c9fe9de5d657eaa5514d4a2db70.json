{"ast":null,"code":"import _asyncToGenerator from \"/workspace/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport AuthService from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport default class AuthGuardService {\n  constructor(_authService, _router) {\n    var _this = this;\n\n    this._authService = _authService;\n    this._router = _router;\n\n    this.canActivate = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (route, state) {\n        const isAuthenticated = yield _this._authService.isAuthenticated();\n\n        if (!isAuthenticated) {\n          _this._router.navigate(['/']);\n        }\n\n        return !isAuthenticated;\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n}\n\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || AuthGuardService)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i1.Router));\n};\n\nAuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuardService,\n  factory: AuthGuardService.ɵfac\n});","map":{"version":3,"sources":["/workspace/apps/mod10/src/app/auth-guard.service.ts"],"names":["ActivatedRouteSnapshot","Router","RouterStateSnapshot","AuthService","i0","i1","AuthGuardService","constructor","_authService","_router","canActivate","route","state","isAuthenticated","navigate","ɵfac","AuthGuardService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory"],"mappings":";AAAA,SAASA,sBAAT,EAAiCC,MAAjC,EAAyCC,mBAAzC,QAAoE,iBAApE;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,eAAe,MAAMC,gBAAN,CAAuB;AAClCC,EAAAA,WAAW,CAACC,YAAD,EAAeC,OAAf,EAAwB;AAAA;;AAC/B,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,OAAL,GAAeA,OAAf;;AACA,SAAKC,WAAL;AAAA,mCAAmB,WAAOC,KAAP,EAAcC,KAAd,EAAwB;AACvC,cAAMC,eAAe,SAAS,KAAI,CAACL,YAAL,CAAkBK,eAAlB,EAA9B;;AACA,YAAI,CAACA,eAAL,EAAsB;AAClB,UAAA,KAAI,CAACJ,OAAL,CAAaK,QAAb,CAAsB,CAAC,GAAD,CAAtB;AACH;;AACD,eAAO,CAACD,eAAR;AACH,OAND;;AAAA;AAAA;AAAA;AAAA;AAOH;;AAXiC;;AAatCP,gBAAgB,CAACS,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIX,gBAAV,EAA4BF,EAAE,CAACc,QAAH,CAAYf,WAAZ,CAA5B,EAAsDC,EAAE,CAACc,QAAH,CAAYb,EAAE,CAACJ,MAAf,CAAtD,CAAP;AAAuF,CAAtJ;;AACAK,gBAAgB,CAACa,KAAjB,GAAyB,aAAcf,EAAE,CAACgB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEf,gBAAT;AAA2BgB,EAAAA,OAAO,EAAEhB,gBAAgB,CAACS;AAArD,CAAtB,CAAvC","sourcesContent":["import { ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';\nimport AuthService from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport default class AuthGuardService {\n    constructor(_authService, _router) {\n        this._authService = _authService;\n        this._router = _router;\n        this.canActivate = async (route, state) => {\n            const isAuthenticated = await this._authService.isAuthenticated();\n            if (!isAuthenticated) {\n                this._router.navigate(['/']);\n            }\n            return !isAuthenticated;\n        };\n    }\n}\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) { return new (t || AuthGuardService)(i0.ɵɵinject(AuthService), i0.ɵɵinject(i1.Router)); };\nAuthGuardService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuardService, factory: AuthGuardService.ɵfac });\n"]},"metadata":{},"sourceType":"module"}